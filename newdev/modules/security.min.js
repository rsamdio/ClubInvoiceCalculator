(function(){if(!window.SecurityUtils){window.SecurityUtils ={sanitizeHTML: function(str){if(typeof str !== 'string')return '';const div = document.createElement('div');div.textContent = str;return div.innerHTML;},sanitizeText: function(str){if(typeof str !== 'string')return '';const div = document.createElement('div');div.textContent = str;return div.textContent || div.innerText || '';},validateFile: function(file){const allowedTypes = [ 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet','application/vnd.ms-excel','text/csv','application/csv' ];const maxSize = 5 * 1024 * 1024;if(!allowedTypes.includes(file.type)){throw new Error('Invalid file type. Please upload Excel(.xlsx,.xls)or CSV files only.');}if(file.size > maxSize){throw new Error('File size too large. Maximum size is 5MB.');}return true;},validateDate: function(dateString){if(!dateString || typeof dateString !== 'string')return false;const dateRegex = /^\d{4}-\d{2}-\d{2}$/;if(!dateRegex.test(dateString))return false;const date = new Date(dateString);return date instanceof Date && !isNaN(date)&& date.getFullYear()>= 1900 && date.getFullYear()<= 2100;},validateMemberName: function(name){if(!name || typeof name !== 'string')return false;const sanitizedName = this.sanitizeText(name).trim();return sanitizedName.length >= 2 && sanitizedName.length <= 100 && /^[a-zA-Z\s\-'\.]+$/.test(sanitizedName);}};}if(!window.FormValidator){window.FormValidator = class FormValidator{constructor(){this.errors = new Map();this.validationRules ={'member-name': [{test:(value)=> window.SecurityUtils.validateMemberName(value),message: 'Member name is required and must be 2-100 characters with only letters,spaces,hyphens,apostrophes,and periods'}],'member-type': [{test:(value)=> value.length > 0,message: 'Please select a Club Base'}],'join-date': [{test:(value)=> value.length > 0,message: 'Join date is required'},{test:(value)=> window.SecurityUtils.validateDate(value),message: 'Please enter a valid date in YYYY-MM-DD format'}],'leave-date': [{test:(value)=> !value || window.SecurityUtils.validateDate(value),message: 'Please enter a valid date in YYYY-MM-DD format'},{test:(value)=> !value || this.isLeaveDateValid(value),message: 'Leave date cannot be before join date'}]};}isValidDate(dateString){const date = new Date(dateString);return date instanceof Date && !isNaN(date);}isLeaveDateValid(leaveDate){const joinDate = document.getElementById('join-date')?.value;if(!joinDate)return true;const leaveDateObj = new Date(leaveDate);const joinDateObj = new Date(joinDate);return leaveDateObj >= joinDateObj;}validateField(fieldId){const field = document.getElementById(fieldId);if(!field || !this.validationRules[fieldId])return true;let value;if(fieldId === 'member-type'){value = getSelectedMemberType();}else{value = field.value;}const rules = this.validationRules[fieldId];this.clearFieldError(fieldId);for(const rule of rules){if(!rule.test(value)){this.setFieldError(fieldId,rule.message);return false;}}this.setFieldSuccess(fieldId);return true;}validateAll(){this.clearAllErrors();let isValid = true;const fieldIds = Object.keys(this.validationRules);for(const fieldId of fieldIds){if(!this.validateField(fieldId)){isValid = false;}}return isValid;}setFieldError(fieldId,message){const field = document.getElementById(fieldId);const errorElement = document.getElementById(`${fieldId}-error`);if(field && errorElement){field.classList.remove('input-success');field.classList.add('input-error');errorElement.textContent = window.SecurityUtils.sanitizeText(message);errorElement.style.display = 'block';this.errors.set(fieldId,message);}}setFieldSuccess(fieldId){const field = document.getElementById(fieldId);const errorElement = document.getElementById(`${fieldId}-error`);if(field && errorElement){field.classList.remove('input-error');field.classList.add('input-success');errorElement.style.display = 'none';errorElement.textContent = '';this.errors.delete(fieldId);}}clearFieldError(fieldId){const field = document.getElementById(fieldId);const errorElement = document.getElementById(`${fieldId}-error`);if(field && errorElement){field.classList.remove('input-error','input-success');errorElement.style.display = 'none';errorElement.textContent = '';this.errors.delete(fieldId);}}clearAllErrors(){document.querySelectorAll('.error-message').forEach(el =>{el.style.display = 'none';el.textContent = '';});document.querySelectorAll('.input-error,.input-success').forEach(el =>{el.classList.remove('input-error','input-success');});this.errors.clear();}getFirstError(){return this.errors.size > 0 ? this.errors.values().next().value : null;}hasErrors(){return this.errors.size > 0;}};}})();